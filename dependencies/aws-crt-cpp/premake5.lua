--------------------------------------------------------------------
-- This file was automatically generated by ProjectGenerator
-- which is tooling part the build system designed for GUCEF
--     (Galaxy Unlimited Framework)
-- For the latest info, see http://www.VanvelzenSoftware.com/
--
-- The contents of this file are placed in the public domain. Feel
-- free to make use of it in any way you like.
--------------------------------------------------------------------
--

-- Configuration for module: aws-crt-cpp


project( "aws-crt-cpp" )

configuration( {} )
  location( os.getenv( "PM5OUTPUTDIR" ) )

configuration( {} )
  targetdir( os.getenv( "PM5TARGETDIR" ) )

configuration( {} )
language( "C++" )



configuration( {} )
kind( "SharedLib" )

configuration( {} )
links( { "aws-c-auth", "aws-c-cal", "aws-c-common", "aws-c-compression", "aws-c-event-stream", "aws-c-http", "aws-c-io", "aws-c-mqtt", "aws-c-s3", "aws-c-sdkutils", "aws-checksums" } )
links( { "aws-c-auth", "aws-c-cal", "aws-c-common", "aws-c-compression", "aws-c-event-stream", "aws-c-http", "aws-c-io", "aws-c-mqtt", "aws-c-s3", "aws-c-sdkutils", "aws-checksums" } )


configuration( {} )
defines( { "AWS_CRT_CPP_EXPORTS", "CJSON_AS4CPP_HIDE_SYMBOLS", "CJSON_HIDE_SYMBOLS", "USE_IMPORT_EXPORT=1" } )
  

configuration( { ANDROID } )
defines( { "ENABLE_OPENSSL_ENCRYPTION" } )
  

configuration( { LINUX32 } )
defines( { "AWS_AFFINITY_METHOD=AWS_AFFINITY_METHOD_PTHREAD_ATTR", "ENABLE_OPENSSL_ENCRYPTION", "PLATFORM_LINUX", "_POSIX_C_SOURCE=200809L", "_XOPEN_SOURCE=500" } )
  

configuration( { LINUX64 } )
defines( { "AWS_AFFINITY_METHOD=AWS_AFFINITY_METHOD_PTHREAD_ATTR", "ENABLE_OPENSSL_ENCRYPTION", "PLATFORM_LINUX", "_POSIX_C_SOURCE=200809L", "_XOPEN_SOURCE=500" } )
  

configuration( { OSX } )
defines( { "ENABLE_COMMONCRYPTO_ENCRYPTION" } )
  links( { "Secur32.lib", "Shlwapi.lib", "Userenv.lib", "Version.lib", "WindowsApp.lib", "Winhttp.lib", "Wininet.lib", "msxml6.lib" } )
  

configuration( { WIN32 } )
defines( { "AWS_CRT_CPP_EXPORTS", "AWS_CRT_CPP_USE_IMPORT_EXPORT", "BYPASS_DEFAULT_PROXY", "ENABLE_BCRYPT_ENCRYPTION", "ENABLE_WINDOWS_CLIENT", "ENABLE_WINDOWS_IXML_HTTP_REQUEST_2_CLIENT", "PLATFORM_WINDOWS", "USE_WINDOWS_DLL_SEMANTICS" } )
  links( { "Secur32.lib", "Shlwapi.lib", "Userenv.lib", "Version.lib", "WindowsApp.lib", "Winhttp.lib", "Wininet.lib", "msxml6.lib" } )
  

configuration( { WIN64 } )
defines( { "AWS_CRT_CPP_EXPORTS", "AWS_CRT_CPP_USE_IMPORT_EXPORT", "BYPASS_DEFAULT_PROXY", "ENABLE_BCRYPT_ENCRYPTION", "ENABLE_WINDOWS_CLIENT", "ENABLE_WINDOWS_IXML_HTTP_REQUEST_2_CLIENT", "PLATFORM_WINDOWS", "USE_WINDOWS_DLL_SEMANTICS" } )


configuration( {} )
vpaths { ["Source"] = { "**.c", "**.cpp", "**.cs", "**.asm" } }
files( {
  "source/Allocator.cpp",
  "source/Api.cpp",
  "source/DateTime.cpp",
  "source/ImdsClient.cpp",
  "source/JsonObject.cpp",
  "source/StringUtils.cpp",
  "source/Types.cpp",
  "source/UUID.cpp",
  "source/auth/Credentials.cpp",
  "source/auth/Sigv4Signing.cpp",
  "source/crypto/HMAC.cpp",
  "source/crypto/Hash.cpp",
  "source/endpoints/RuleEngine.cpp",
  "source/external/cJSON.cpp",
  "source/http/HttpConnection.cpp",
  "source/http/HttpConnectionManager.cpp",
  "source/http/HttpProxyStrategy.cpp",
  "source/http/HttpRequestResponse.cpp",
  "source/io/Bootstrap.cpp",
  "source/io/ChannelHandler.cpp",
  "source/io/EventLoopGroup.cpp",
  "source/io/HostResolver.cpp",
  "source/io/Pkcs11.cpp",
  "source/io/SocketOptions.cpp",
  "source/io/Stream.cpp",
  "source/io/TlsOptions.cpp",
  "source/io/Uri.cpp",
  "source/iot/MqttClient.cpp",
  "source/mqtt/MqttClient.cpp"
 } )


configuration( {} )
includedirs( { "crt/aws-c-auth/include", "crt/aws-c-cal/include", "crt/aws-c-common/include", "crt/aws-c-compression/include", "crt/aws-c-event-stream/include", "crt/aws-c-http/include", "crt/aws-c-io/include", "crt/aws-c-io/source", "crt/aws-c-mqtt/include", "crt/aws-c-s3/include", "crt/aws-c-sdkutils/include", "crt/aws-checksums/include", "include" } )
