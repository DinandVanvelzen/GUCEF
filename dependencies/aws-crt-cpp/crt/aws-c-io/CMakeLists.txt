#-------------------------------------------------------------------
# This file was automatically generated by ProjectGenerator
# which is tooling part the build system designed for GUCEF
#     (Galaxy Unlimited Framework)
# For the latest info, see http://www.VanvelzenSoftware.com/
#
# The contents of this file are placed in the public domain. Feel
# free to make use of it in any way you like.
#-------------------------------------------------------------------
#

# Configuration for module: aws-c-io

set( HEADER_FILES 
  source/pkcs11_private.h
)

set( SOURCE_FILES 
  source/alpn_handler.c
  source/channel.c
  source/channel_bootstrap.c
  source/event_loop.c
  source/exponential_backoff_retry_strategy.c
  source/host_resolver.c
  source/io.c
  source/message_pool.c
  source/pem_utils.c
  source/pkcs11_lib.c
  source/pkcs11_tls_op_handler.c
  source/pki_utils.c
  source/retry_strategy.c
  source/socket_channel_handler.c
  source/standard_retry_strategy.c
  source/statistics.c
  source/stream.c
  source/tls_channel_handler.c
  source/tls_channel_handler_shared.c
)



if (LINUX32)
  set( PLATFORM_SOURCE_FILES 
    source/linux/epoll_event_loop.c
  )

  set( PLATFORM_SOURCE_INSTALL "LINUX32" )
  source_group( "Platform Source Files" FILES ${PLATFORM_SOURCE_FILES} )

elseif (LINUX64)
  set( PLATFORM_SOURCE_FILES 
    source/linux/epoll_event_loop.c
  )

  set( PLATFORM_SOURCE_INSTALL "LINUX64" )
  source_group( "Platform Source Files" FILES ${PLATFORM_SOURCE_FILES} )

elseif (OSX)
  set( PLATFORM_SOURCE_FILES 
    source/darwin/darwin_pki_utils.c
    source/darwin/secure_transport_tls_channel_handler.c
  )

  set( PLATFORM_SOURCE_INSTALL "OSX" )
  source_group( "Platform Source Files" FILES ${PLATFORM_SOURCE_FILES} )

elseif (WIN32)
  set( PLATFORM_SOURCE_FILES 
    source/windows/host_resolver.c
    source/windows/secure_channel_tls_handler.c
    source/windows/shared_library.c
    source/windows/windows_pki_utils.c
    source/windows/winsock_init.c
    source/windows/iocp/iocp_event_loop.c
    source/windows/iocp/pipe.c
    source/windows/iocp/socket.c
  )

  set( PLATFORM_SOURCE_INSTALL "WIN32" )
  source_group( "Platform Source Files" FILES ${PLATFORM_SOURCE_FILES} )

elseif (WIN64)
  set( PLATFORM_SOURCE_FILES 
    source/windows/host_resolver.c
    source/windows/secure_channel_tls_handler.c
    source/windows/shared_library.c
    source/windows/windows_pki_utils.c
    source/windows/winsock_init.c
    source/windows/iocp/iocp_event_loop.c
    source/windows/iocp/pipe.c
    source/windows/iocp/socket.c
  )

  set( PLATFORM_SOURCE_INSTALL "WIN64" )
  source_group( "Platform Source Files" FILES ${PLATFORM_SOURCE_FILES} )

endif ()

# Make sure the PLATFORM_HEADER_FILES variable is always defined
 set( PLATFORM_HEADER_FILES "" )

# For ease of use make a variable that has all files for this module
set( ALL_FILES ${HEADER_FILES} ${SOURCE_FILES} ${PLATFORM_HEADER_FILES} ${PLATFORM_SOURCE_FILES} )

set( MODULE_NAME "aws-c-io" )
add_library( ${MODULE_NAME} STATIC ${ALL_FILES} )
add_dependencies( ${MODULE_NAME} aws-c-cal aws-c-common )
target_link_libraries( ${MODULE_NAME} aws-c-cal aws-c-common )

if ( WIN32 )
  set_property( TARGET ${MODULE_NAME} APPEND_STRING PROPERTY COMPILE_DEFINITIONS "AWS_USE_IO_COMPLETION_PORTS" )
endif( WIN32 )

if ( WIN64 )
  set_property( TARGET ${MODULE_NAME} APPEND_STRING PROPERTY COMPILE_DEFINITIONS "AWS_USE_IO_COMPLETION_PORTS" )
endif( WIN64 )

include_directories( ../aws-c-cal/include ../aws-c-common/include include source )



#******** START OF AUTOGENERATED TEMPLATED ADDITION CONTENT ********




if (ANDROID)
GUCEF_config_lib( ${MODULE_NAME} )
elseif (LINUX32)
GUCEF_config_lib( ${MODULE_NAME} )
elseif (LINUX64)
GUCEF_config_lib( ${MODULE_NAME} )
elseif (OSX)
GUCEF_config_lib( ${MODULE_NAME} )
elseif (WIN32)
GUCEF_config_lib( ${MODULE_NAME} )
elseif (WIN64)
GUCEF_config_lib( ${MODULE_NAME} )
else()
GUCEF_config_lib( ${MODULE_NAME} )
endif()



#******** END OF AUTOGENERATED TEMPLATED ADDITION CONTENT ********


