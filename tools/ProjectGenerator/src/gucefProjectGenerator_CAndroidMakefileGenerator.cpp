/*
 *  ProjectGenerator: Tool to generate module/project files
 *  Copyright (C) 2002 - 2011.  Dinand Vanvelzen
 *
 *  This library is free software; you can redistribute it and/or
 *  modify it under the terms of the GNU Lesser General Public
 *  License as published by the Free Software Foundation; either
 *  version 2.1 of the License, or (at your option) any later version.
 *
 *  This library is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 *  Lesser General Public License for more details.
 *
 *  You should have received a copy of the GNU Lesser General Public
 *  License along with this library; if not, write to the Free Software
 *  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
 */

/*-------------------------------------------------------------------------//
//                                                                         //
//      INCLUDES                                                           //
//                                                                         //
//-------------------------------------------------------------------------*/

#ifndef GUCEF_CORE_LOGGING_H
#include "gucefCORE_Logging.h"
#define GUCEF_CORE_LOGGING_H
#endif /* GUCEF_CORE_LOGGING_H ? */

#ifndef GUCEF_CORE_DVCPPSTRINGUTILS_H
#include "dvcppstringutils.h"
#define GUCEF_CORE_DVCPPSTRINGUTILS_H
#endif /* GUCEF_CORE_DVCPPSTRINGUTILS_H ? */

#include "gucefProjectGenerator_CAndroidMakefileGenerator.h"

/*-------------------------------------------------------------------------//
//                                                                         //
//      NAMESPACE                                                          //
//                                                                         //
//-------------------------------------------------------------------------*/

namespace GUCEF {
namespace PROJECTGENERATOR {

/*-------------------------------------------------------------------------//
//                                                                         //
//      GLOBAL VARS                                                        //
//                                                                         //
//-------------------------------------------------------------------------*/

const char* makefileHeader = 
    "#-------------------------------------------------------------------\n"
    "# This file has been automatically generated by ProjectGenerator    \n"
    "# which is part of a build system designed for GUCEF                \n"
    "#     (Galaxy Unlimited Framework)                                  \n"
    "# For the latest info, see http://www.VanvelzenSoftware.com/        \n"
    "#                                                                   \n"
    "# The contents of this file are placed in the public domain. Feel   \n"
    "# free to make use of it in any way you like.                       \n"
    "#-------------------------------------------------------------------\n\n\n";
    
/*-------------------------------------------------------------------------//
//                                                                         //
//      UTILITIES                                                          //
//                                                                         //
//-------------------------------------------------------------------------*/

CORE::CString
GenerateContentForAndroidMakefile( TProjectInfo& projectInfo            ,
                                   TModuleInfo& moduleInfo              ,
                                   bool addGeneratorCompileTimeToOutput )
{GUCEF_TRACE;

    CORE::CString contentPrefix = makefileHeader;

    if ( addGeneratorCompileTimeToOutput )
    {
        contentPrefix += 
          "#"
          "# The project generator version used was compiled on " __TIME__ __DATE__ "\n"
          "#\n\n";
    }
    
    contentPrefix +=
      "LOCAL_PATH := $(call my-dir)\n\n"
      "include $(CLEAR_VARS)\n\n"
      "LOCAL_MODULE := " + moduleInfo.name + "\n\n";
    
    // Generate the source files section
    CORE::CString srcFilesSection = "LOCAL_SRC_FILES := \\\n";
    TStringVectorMap::iterator i = moduleInfo.sourceDirs.begin();
    while ( i != moduleInfo.sourceDirs.end() )
    {
        const CORE::CString& srcDir = (*i).first;
        const TStringVector& srcFiles = (*i).second;
        
        TStringVector::const_iterator n = srcFiles.begin();
        while ( n != srcFiles.end() )
        {
            CORE::CString relFilePath = srcDir;
            CORE::AppendToPath( relFilePath, (*n) );
            
            srcFilesSection += "  " + relFilePath.ReplaceChar( '\\', '/' );            
            
            ++n;
            
            // We are not finished yet, add marker saying more to come
            if ( n != srcFiles.end() )
            {
                srcFilesSection += " \\\n"; 
            }
        }        
        ++i;
    }
    
    // Add some spacing for readability
    srcFilesSection += "\n\n";
    
    // Generate the included files section
    // for android make files we only need the path
    // it will locate the header file on its own
    CORE::CString includeFilesSection = "LOCAL_C_INCLUDES := \\\n";
    i = moduleInfo.includeDirs.begin();
    while ( i != moduleInfo.includeDirs.end() )
    {
        const CORE::CString& dir = (*i).first;
        if ( !dir.IsNULLOrEmpty() )
        {
            includeFilesSection += "  " + dir.ReplaceChar( '\\', '/' );        
        }
        else
        {
            // Support the use-case where the include dir is empty because the moduleinfo dir == incude dir
            includeFilesSection += "  $(LOCAL_PATH)"; 
        }
        
        ++i;
        
        // We are not finished yet, add marker saying more to come
        if ( !moduleInfo.dependencyIncludeDirs.empty() || i != moduleInfo.includeDirs.end() )
        {
            includeFilesSection += " \\\n"; 
        }
    }
    
    // We also need to add the include paths required to find headers
    // refered to because of dependencies
    TStringSet::iterator n = moduleInfo.dependencyIncludeDirs.begin();
    while ( n != moduleInfo.dependencyIncludeDirs.end() )
    {
        includeFilesSection += "  " + (*n).ReplaceChar( '\\', '/' ) + " \\\n";
        
        ++n;
        
        // We are not finished yet, add marker saying more to come
        if ( n != moduleInfo.dependencyIncludeDirs.end() )
        {
            includeFilesSection += " \\\n"; 
        }
    }
    
    // Add some spacing for readability
    includeFilesSection += "\n\n";
    
    // Check if we have a file on disk of information which is to be inserted into
    // our automatically generated make file
    CORE::CString manualContent;
    CORE::CString manualContentFilePath = moduleInfo.rootDir;
    CORE::AppendToPath( manualContentFilePath, "AndroidAddition.mk" );
    if ( CORE::FileExists( manualContentFilePath ) )
    {
        if ( CORE::LoadTextFileAsString( manualContentFilePath , 
                                         manualContent         ) )
        {
            GUCEF_LOG( CORE::LOGLEVEL_NORMAL, "Successfully loaded manually defined content for module " + moduleInfo.name + " from addition file " + manualContentFilePath );
        }
        else
        {
            manualContent = 
              "# *** ERROR *** Finish me\n"
              "# Unable to load manually defined content from detected AndroidAddition.mk file\n"
              "# Please manually insert its contents here\n\n";
            GUCEF_ERROR_LOG( CORE::LOGLEVEL_NORMAL, "Error: the module " + moduleInfo.name + " has manually defined content in a AndroidAddition.mk file but it could not be loaded, you will have to manually edit the file to correct the error" );    
        }
    }
    
    // Now generate the latter part of the file which contains more meta data about the module
    CORE::CString contentSuffix;
    switch ( moduleInfo.moduleType )
    {
        case MODULETYPE_SHARED_LIBRARY:
        {
            contentSuffix += "include $(BUILD_SHARED_LIBRARY)\n\n";
            break;
        }
        case MODULETYPE_STATIC_LIBRARY:
        {
            contentSuffix += "include $(BUILD_STATIC_LIBRARY)\n\n";
            break;
        }
        case MODULETYPE_EXECUTABLE:
        { 
            contentSuffix += "include $(BUILD_EXECUTABLE)\n\n";
            break;
        }
        default:
        {
            contentSuffix += 
              "# *** ERROR *** Finish me\n"
              "# Unable to determing module type from the source information\n"
              "# Please edit the line below to manually set the correct module type to build\n"
              "#include $(BUILD_???)\n\n";
              
            GUCEF_ERROR_LOG( CORE::LOGLEVEL_NORMAL, "Error: the module " + moduleInfo.name + " does not have a useable module type set, you will have to manually edit the file to correct the error" );  
            break;
        }
    }
    
    return contentPrefix + srcFilesSection + includeFilesSection + manualContent + contentSuffix;
}

/*-------------------------------------------------------------------------*/

bool
CreateAndroidMakefileOnDiskForModule( TProjectInfo& projectInfo            ,
                                      TModuleInfo& moduleInfo              ,
                                      bool addGeneratorCompileTimeToOutput )
{GUCEF_TRACE;
    
    GUCEF_LOG( CORE::LOGLEVEL_NORMAL, "Generating Android makefile content for module " + moduleInfo.name ); 
    
    // First we generate the content for the makefile based on the given module information
    CORE::CString makefileContent = GenerateContentForAndroidMakefile( projectInfo                     ,
                                                                       moduleInfo                      ,
                                                                       addGeneratorCompileTimeToOutput );
    
    // Now we write the makefile to the root location of the module since everything is relative to that
    CORE::CString makefilePath = moduleInfo.rootDir;
    CORE::AppendToPath( makefilePath, "Android.mk" );
        
    GUCEF_LOG( CORE::LOGLEVEL_NORMAL, "Writing Android makefile content for module " + moduleInfo.name + " to " + makefilePath );    

    if ( CORE::WriteStringAsTextFile( makefilePath    , 
                                      makefileContent , 
                                      "\n"            ) )
    {
        GUCEF_LOG( CORE::LOGLEVEL_NORMAL, "Successfully created Android makefile for module " + moduleInfo.name + " at " + makefilePath );    
        return true;
    }
    GUCEF_ERROR_LOG( CORE::LOGLEVEL_NORMAL, "Failed to create an Android makefile for module " + moduleInfo.name + " at " + makefilePath );
    return false;
}

/*-------------------------------------------------------------------------*/

bool
CreateAndroidMakefileOnDiskForEachModule( TProjectInfo& projectInfo            ,
                                          bool addGeneratorCompileTimeToOutput )
{GUCEF_TRACE;

    TModuleInfoVector::iterator i = projectInfo.modules.begin();
    while ( i != projectInfo.modules.end() )
    {
        TModuleInfo& moduleInfo = (*i);
        if ( !CreateAndroidMakefileOnDiskForModule( projectInfo                     , 
                                                    moduleInfo                      , 
                                                    addGeneratorCompileTimeToOutput ) )
        {
            GUCEF_ERROR_LOG( CORE::LOGLEVEL_NORMAL, "Failed to create an Android makefile for all modules because of the following module " + moduleInfo.name );
            return false;
        }
        
        ++i;
    }
    return true;
}

/*-------------------------------------------------------------------------*/

TModuleInfo*
FindFirstModuleAccordingToBuildOrder( TProjectInfo& projectInfo )
{GUCEF_TRACE;

    TModuleInfoVector::iterator i = projectInfo.modules.begin();
    while ( i != projectInfo.modules.end() )
    {
        if ( (*i).buildOrder == 0 )
        {
            return &(*i);
        }
    }
    return NULL;
}

/*-------------------------------------------------------------------------*/

TModuleInfo*
FindNextModuleAccordingToBuildOrder( TProjectInfo& projectInfo  ,
                                     TModuleInfo& currentModule )
{GUCEF_TRACE;

    TModuleInfoVector::iterator i = projectInfo.modules.begin();
    while ( i != projectInfo.modules.end() )
    {
        if ( (*i).buildOrder == currentModule.buildOrder+1 )
        {
            return &(*i);
        }
        ++i;
    }
    return NULL;        
}

/*-------------------------------------------------------------------------*/

CORE::CString
GenerateContentForAndroidProjectMakefile( TProjectInfo& projectInfo            ,
                                          const CORE::CString& outputDir       ,
                                          bool addGeneratorCompileTimeToOutput )
{GUCEF_TRACE;

    GUCEF_LOG( CORE::LOGLEVEL_NORMAL, "Generating Android makefile content for overall project file regarding project \"" + projectInfo.projectName + "\"" ); 

    CORE::CString contentPrefix = makefileHeader;

    contentPrefix +=
      "#\n"
      "# This is the project makefile which includes all modules which are part of this project\n"
      "#\n";
      
    contentPrefix += 
      "# PROJECT: \"" + projectInfo.projectName + "\"\n#\n\n";
    
    if ( addGeneratorCompileTimeToOutput )
    {
        contentPrefix += 
          "#"
          "# The project generator version used was compiled on " __TIME__ __DATE__ "\n"
          "#\n\n";
    }
    
    contentPrefix +=
      "PROJECT_ROOT_PATH := $(call my-dir)\n\n"
      "include $(CLEAR_VARS)\n\n";
      
    // Include each module's makefile in the order listed as their build order
    CORE::CString moduleListSection;
    TModuleInfo* currentModule = FindFirstModuleAccordingToBuildOrder( projectInfo );
    while ( NULL != currentModule )
    {
        // Get relative path from the outputDir to the module's Android.mk
        CORE::CString relativePathToModule = CORE::GetRelativePathToOtherPathRoot( outputDir, currentModule->rootDir );
        CORE::AppendToPath( relativePathToModule, "Android.mk" );
        relativePathToModule = relativePathToModule.ReplaceChar( '\\', '/' );
        
        // Add entry for this module to the project file
        moduleListSection += "include $(PROJECT_ROOT_PATH)/" + relativePathToModule + "\n";
        
        // Done with this module, go to the next one
        currentModule = FindNextModuleAccordingToBuildOrder( projectInfo, *currentModule );
    }

    return contentPrefix + moduleListSection;
}
   
/*-------------------------------------------------------------------------*/

bool
CreateAndroidProjectMakefileOnDisk( TProjectInfo& projectInfo            ,
                                    const CORE::CString& outputDir       ,
                                    bool addGeneratorCompileTimeToOutput )
{GUCEF_TRACE;

    GUCEF_LOG( CORE::LOGLEVEL_NORMAL, "Generating Android makefile content for overall project file regarding project \"" + projectInfo.projectName + "\"" ); 
    
    // First we generate the content for the makefile based on the given module information
    CORE::CString makefileContent = GenerateContentForAndroidProjectMakefile( projectInfo                     ,
                                                                              outputDir                       ,
                                                                              addGeneratorCompileTimeToOutput );
    
    // Now we write the makefile to the root location of the project since everything is relative to that
    CORE::CString makefilePath = outputDir;
    CORE::AppendToPath( makefilePath, "Android.mk" );
        
    GUCEF_LOG( CORE::LOGLEVEL_NORMAL, "Writing Android makefile content for project \"" + projectInfo.projectName + "\" to " + makefilePath );    

    if ( CORE::WriteStringAsTextFile( makefilePath    , 
                                      makefileContent , 
                                      "\n"            ) )
    {
        GUCEF_LOG( CORE::LOGLEVEL_NORMAL, "Successfully created Android makefile for project \"" + projectInfo.projectName + "\" at " + makefilePath );    
        return true;
    }
    GUCEF_ERROR_LOG( CORE::LOGLEVEL_NORMAL, "Failed to create an Android makefile for project \"" + projectInfo.projectName + "\" at " + makefilePath );
    return false;
}

/*-------------------------------------------------------------------------*/

CAndroidMakefileGenerator::CAndroidMakefileGenerator( void )
{GUCEF_TRACE;

}

/*-------------------------------------------------------------------------*/
    
CAndroidMakefileGenerator::~CAndroidMakefileGenerator()
{GUCEF_TRACE;

}

/*-------------------------------------------------------------------------*/

bool
CAndroidMakefileGenerator::GenerateProject( TProjectInfo& projectInfo            ,
                                            const CORE::CString& outputDir       ,
                                            bool addGeneratorCompileTimeToOutput )
{GUCEF_TRACE;

    // First we create a makefile per module on disk
    if ( CreateAndroidMakefileOnDiskForEachModule( projectInfo                     ,
                                                   addGeneratorCompileTimeToOutput ) )
    {
        // Now we can create the overall project file which refers to each of the make files
        // we just created per module.
        return CreateAndroidProjectMakefileOnDisk( projectInfo                     ,
                                                   outputDir                       ,
                                                   addGeneratorCompileTimeToOutput );
    }    
    return false;
}

/*-------------------------------------------------------------------------//
//                                                                         //
//      NAMESPACE                                                          //
//                                                                         //
//-------------------------------------------------------------------------*/

}; /* namespace PROJECTGENERATOR */
}; /* namespace GUCEF */

/*-------------------------------------------------------------------------*/
