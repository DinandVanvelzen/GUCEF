/*
 *  CMakeListGenerator: Tool to generate CMakeList.txt with headers and sources
 *  Copyright (C) 2002 - 2009.  Dinand Vanvelzen
 *
 *  This library is free software; you can redistribute it and/or
 *  modify it under the terms of the GNU Lesser General Public
 *  License as published by the Free Software Foundation; either
 *  version 2.1 of the License, or (at your option) any later version.
 *
 *  This library is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 *  Lesser General Public License for more details.
 *
 *  You should have received a copy of the GNU Lesser General Public
 *  License along with this library; if not, write to the Free Software
 *  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA 
 */

/*-------------------------------------------------------------------------//
//                                                                         //
//      INCLUDES                                                           //
//                                                                         //
//-------------------------------------------------------------------------*/

#include <stdio.h>

#ifndef GUCEF_CORE_CDATANODE_H
#include "CDataNode.h"
#define GUCEF_CORE_CDATANODE_H
#endif /* GUCEF_CORE_CDATANODE_H ? */

#ifndef GUCEF_CORE_CDSTORECODECREGISTRY_H
#include "CDStoreCodecRegistry.h"
#define GUCEF_CORE_CDSTORECODECREGISTRY_H
#endif /* GUCEF_CORE_CDSTORECODECREGISTRY_H ? */

#ifndef GUCEF_CORE_CTRACER_H
#include "CTracer.h"
#define GUCEF_CORE_CTRACER_H
#endif /* GUCEF_CORE_CTRACER_H ? */

#ifndef GUCEF_CORE_DVCPPSTRINGUTILS_H
#include "dvcppstringutils.h"
#define GUCEF_CORE_DVCPPSTRINGUTILS_H
#endif /* GUCEF_CORE_DVCPPSTRINGUTILS_H ? */

#ifndef GUCEF_CORE_DVFILEUTILS_H
#include "dvfileutils.h"
#define GUCEF_CORE_DVFILEUTILS_H
#endif /* GUCEF_CORE_DVFILEUTILS_H ? */

#ifndef GUCEF_CORE_CVALUELIST_H
#include "CValueList.h"
#define GUCEF_CORE_CVALUELIST_H
#endif /* GUCEF_CORE_CVALUELIST_H ? */

#ifndef GUCEF_CORE_LOGGING_H
#include "gucefCORE_Logging.h"
#define GUCEF_CORE_LOGGING_H
#endif /* GUCEF_CORE_LOGGING_H ? */

#ifndef GUCEF_CORE_CFILEACCESS_H
#include "CFileAccess.h"
#define GUCEF_CORE_CFILEACCESS_H
#endif /* GUCEF_CORE_CFILEACCESS_H ? */

#ifdef GUCEF_MSWIN_BUILD
#include <windows.h>
#endif /* GUCEF_MSWIN_BUILD ? */

/*-------------------------------------------------------------------------//
//                                                                         //
//      TYPES                                                              //
//                                                                         //
//-------------------------------------------------------------------------*/

using namespace GUCEF;

/*---------------------------------------------------------------------------*/

typedef std::set< CORE::CString > TStringSet;
typedef std::map< CORE::CString, CORE::CString > TStringMap;
typedef std::map< CORE::CString, TStringSet > TStringSetMap;
typedef std::vector< CORE::CString > TStringVector;
typedef std::map< CORE::CString, TStringVector > TStringVectorMap;
typedef std::map< CORE::CString, TStringVectorMap > TStringVectorMapMap;

/*---------------------------------------------------------------------------*/

struct SModuleInfo
{
    TStringVector dependencies;                  // list of module names of all modules this module depends on
    TStringVectorMap includeDirs;                // include directories of this module's own headers
    TStringSet dependencyIncludeDirs;            // include directories needed for the headers of the dependencies
    TStringSetMap dependencyPlatformIncludeDirs; // include directories needed for the headers of the dependencies which are platform specific 
    TStringVectorMap sourceDirs;                 // source directories of this module's own source
    TStringVectorMapMap platformHeaderFiles;     // platform specific headers of this module
    TStringVectorMapMap platformSourceFiles;     // platform specific source of this module
    CORE::CString name;                          // the name of the module
    CORE::CString rootDir;                       // the absolute path to the root of this module's directory tree
    
    CORE::CString cmakeListFileContentPreSuffix;  // autogenerated content which prefixes the suffix file content
    CORE::CString cmakeListSuffixFileContent;     // manually written suffix file which will be merged into the final file
    CORE::CString cmakeListFileContentPostSuffix; // autogenerated content which postfixes the suffix file content
    
    int buildOrder;                               // order number of this module in the build queue
};
typedef struct SModuleInfo TModuleInfo;

/*---------------------------------------------------------------------------*/

typedef std::vector< TModuleInfo > TModuleInfoVector;
typedef std::vector< TModuleInfo* > TModuleInfoPtrVector;

/*---------------------------------------------------------------------------*/

struct SProjectInfo
{
    TModuleInfoVector modules;
};
typedef struct SProjectInfo TProjectInfo;

/*---------------------------------------------------------------------------*/

typedef std::map< int, TModuleInfo* > TModulePrioMap;

/*---------------------------------------------------------------------------*/

struct SDirProcessingInstructions
{
    TStringVector simpleExcludeList;
    CORE::CDataNode processingInstructions;
};
typedef struct SDirProcessingInstructions TDirProcessingInstructions;

/*-------------------------------------------------------------------------//
//                                                                         //
//      UTILITIES                                                          //
//                                                                         //
//-------------------------------------------------------------------------*/

TStringVector
GetSourceFileExtensions( void )
{GUCEF_TRACE;

    TStringVector fileTypes;
    fileTypes.push_back( "c" );
    fileTypes.push_back( "cpp" );
    fileTypes.push_back( "cxx" );
    fileTypes.push_back( "asm" );
    return fileTypes;
}

/*---------------------------------------------------------------------------*/

TStringVector
GetHeaderFileExtensions( void )
{GUCEF_TRACE;

    TStringVector fileTypes;
    fileTypes.push_back( "h" );
    fileTypes.push_back( "hpp" );

    return fileTypes;
}

/*---------------------------------------------------------------------------*/

bool
RemoveString( std::vector< CORE::CString >& list , 
              const CORE::CString& searchStr     )
{GUCEF_TRACE;

    //@TODO: make wildcard processing more advanced then this :)
    if ( searchStr == "*" )
    {
        list.empty();
    }
    
    bool removedString = false;
    TStringVector::iterator i = list.begin();
    while ( i != list.end() )
    {
        if ( (*i) == searchStr )
        {
            list.erase( i );
            i = list.begin();
            removedString = true;
        }
        else
        {
            ++i;
        }
    }
    return removedString;
}

/*---------------------------------------------------------------------------*/

bool
IsDirAProjectDir( CORE::CString dir )
{GUCEF_TRACE;

    // We detect module directories in 2 ways
    // Either is has to have certain directories or
    // it has to have a CMakeListsSuffix.txt file
    
    CORE::CString includeDir = dir;
    CORE::AppendToPath( includeDir, "include" );
    CORE::CString srcDir = dir;
    CORE::AppendToPath( srcDir, "src" );
    CORE::CString suffixFilePath = dir;
    CORE::AppendToPath( suffixFilePath, "CMakeListsSuffix.txt" );
    
    return ( CORE::IsPathValid( includeDir ) &&
             CORE::IsPathValid( srcDir )      ) ||
           CORE::FileExists( suffixFilePath );  
}

/*---------------------------------------------------------------------------*/

CORE::CDStoreCodecRegistry::TDStoreCodecPtr
GetXmlDStoreCodec( void )
{
    static CORE::CDStoreCodecRegistry::TDStoreCodecPtr codecPtr;
    if ( codecPtr.IsNULL() )
    {
        CORE::CDStoreCodecRegistry* registry  = CORE::CDStoreCodecRegistry::Instance();
        registry->TryLookup( "XML", codecPtr );        
    }
    return codecPtr;
}

/*---------------------------------------------------------------------------*/

bool
GetProcessingInstructions( const CORE::CString& dir      ,
                           CORE::CDataNode& instructions )
{GUCEF_TRACE;

    CORE::CString instructionsFile = dir;
    CORE::AppendToPath( instructionsFile, "CMakeGenInstructions.xml" );
    
    if ( CORE::FileExists( instructionsFile ) )
    {    
        CORE::CDStoreCodecRegistry::TDStoreCodecPtr codecPtr = GetXmlDStoreCodec();    
        if ( !codecPtr.IsNULL() )
        {
            if ( codecPtr->BuildDataTree( &instructions    , 
                                          instructionsFile ) )
            {
                return true;
            }                                          
        }
            
    }
    return false;
}

/*---------------------------------------------------------------------------*/

TStringVector
GetExcludeList( const CORE::CString& dir )
{GUCEF_TRACE;

    CORE::CString excludeFile = dir;
    CORE::AppendToPath( excludeFile, "CMakeGenExcludeList.txt" );
    
    if ( CORE::FileExists( excludeFile ) )
    {
        CORE::CString excludeFileContent;
        if ( CORE::LoadTextFileAsString( excludeFile        ,
                                         excludeFileContent ) )
        {
            excludeFileContent = excludeFileContent.RemoveChar( '\r' );
            return excludeFileContent.ParseElements( '\n' );            
        } 
    }
    
    return TStringVector();
}

/*---------------------------------------------------------------------------*/

void
ExcludeOrIncludeEntriesAsSpecifiedForDir( const CORE::CString& dir                          ,
                                          const TDirProcessingInstructions& allInstructions ,
                                          const CORE::CString& platform                     , 
                                          TStringVector& allEntries                         )
{
    // First we exclude based off of the simple exclude list
    const TStringVector& excludeList = allInstructions.simpleExcludeList;
    TStringVector::const_iterator n = excludeList.begin();
    while ( n != excludeList.end() )
    {
        if ( RemoveString( allEntries, (*n) ) )
        {
            GUCEF_LOG( CORE::LOGLEVEL_NORMAL, "Excluded the entry \"" + (*n) + "\" based on the exclude list for this dir" );
        }
        ++n;
    }
    
    // Now we exclude based on the processing instructions for this dir
    // if any exist
    const CORE::CDataNode& instructions = allInstructions.processingInstructions;
    if ( instructions.HasChildren() )
    {
        GUCEF_LOG( CORE::LOGLEVEL_NORMAL, "Loaded processing instructions for directory \"" + dir + "\" in order to check for exclude directives" );
        
        // write down the tags we will parse for
        static const CORE::CString rootNodeName = "CMAKELISTGENERATOR";
        static const CORE::CString excludesNodeName = "EXCLUDES";
        static const CORE::CString includesNodeName = "INCLUDES";
        static const CORE::CString platformNodeName = "PLATFORM";
        static const CORE::CString itemNodeName = "ITEM";
        static const CORE::CString nameAttribName = "NAME";
        
        // Parse the instructions for the information we are looking for
        CORE::CString leftOver;
        const CORE::CDataNode* rootNode = instructions.Find( rootNodeName );
        if ( 0 != rootNode )
        {
            CORE::CDataNode::const_iterator i = rootNode->ConstBegin();
            while ( i != rootNode->End() )
            {
                const CORE::CDataNode* curNode = (*i);
                if ( curNode->GetName() == excludesNodeName )
                {
                    // Check if the instructions apply to our platform
                    CORE::CString attribValue = curNode->GetAttributeValue( platformNodeName );
                    if ( platform.IsNULLOrEmpty() ||
                         platform == attribValue  ||
                         attribValue.IsNULLOrEmpty() )
                    {
                        // These instructions apply to our platform... proceed
                        const CORE::CDataNode* excludesNode = curNode;
                        CORE::CDataNode::const_iterator n = excludesNode->ConstBegin();
                        while ( n != excludesNode->ConstEnd() )
                        {
                            // Process all the items in this instruction set
                            const CORE::CDataNode* curNode2 = (*n);
                            if ( curNode2->GetName() == itemNodeName )
                            {
                                attribValue = curNode2->GetAttributeValue( platformNodeName );
                                if ( !attribValue.IsNULLOrEmpty() )
                                {
                                    if ( RemoveString( allEntries, attribValue ) )
                                    {
                                        GUCEF_LOG( CORE::LOGLEVEL_NORMAL, "Excluded the entry \"" + attribValue + "\" based on the processing instructions for this dir" );
                                    }
                                }
                            }
                            ++n;
                        }
                    }
                    
                }
                else
                if ( curNode->GetName() == includesNodeName )
                {
                    // Check if the instructions apply to our platform
                    CORE::CString attribValue = curNode->GetAttributeValue( platformNodeName );
                    if ( platform.IsNULLOrEmpty() ||
                         platform == attribValue  ||
                         attribValue.IsNULLOrEmpty() )
                    {
                        // These instructions apply to our platform... proceed
                        const CORE::CDataNode* includesNode = curNode;
                        CORE::CDataNode::const_iterator n = includesNode->ConstBegin();
                        while ( n != includesNode->End() )
                        {
                            // Process all the items in this instruction set
                            const CORE::CDataNode* curNode2 = (*n);
                            if ( curNode2->GetName() == itemNodeName )
                            {
                                attribValue = curNode2->GetAttributeValue( platformNodeName );
                                if ( !attribValue.IsNULLOrEmpty() )
                                {
                                    allEntries.push_back( attribValue );
                                    GUCEF_LOG( CORE::LOGLEVEL_NORMAL, "Included the entry \"" + attribValue + "\" based on the processing instructions for this dir" );
                                }
                            }
                            ++n;
                        }
                    }
                    
                }

                ++i;
            }
        }
    }
}

/*---------------------------------------------------------------------------*/

void
ExcludeOrIncludeEntriesAsSpecifiedForDir( const CORE::CString& dir      ,
                                          const CORE::CString& platform , 
                                          TStringVector& allEntries     ,
                                          TDirProcessingInstructions* instructionStorage = 0 )
{
    if ( 0 != instructionStorage )
    {
        // Fetch processing instructions from directory
        instructionStorage->simpleExcludeList = GetExcludeList( dir );
        GetProcessingInstructions( dir, instructionStorage->processingInstructions );
        
        // Carry out the process using the fecthed instructions
        ExcludeOrIncludeEntriesAsSpecifiedForDir( dir, *instructionStorage, platform, allEntries ); 
    }
    else
    {
        // Fetch processing instructions from directory
        TDirProcessingInstructions instructions;
        instructions.simpleExcludeList = GetExcludeList( dir );
        GetProcessingInstructions( dir, instructions.processingInstructions );
        
        // Carry out the process using the fecthed instructions
        ExcludeOrIncludeEntriesAsSpecifiedForDir( dir, instructions, platform, allEntries ); 
    }
}

/*---------------------------------------------------------------------------*/

void
ExcludeOrIncludeEntriesAsSpecifiedForDir( const CORE::CString& dir      ,
                                          TStringVector& allEntries     )
{
    ExcludeOrIncludeEntriesAsSpecifiedForDir( dir, CORE::CString(), allEntries );
}

/*---------------------------------------------------------------------------*/

bool
IsStringInList( const TStringVector& list       ,
                bool caseSensitive              ,
                const CORE::CString& testString )
{GUCEF_TRACE;

    TStringVector::const_iterator i = list.begin();
    while ( i != list.end() )
    {
        if ( (*i).Equals( testString, caseSensitive ) )
        {
            return true;
        }
        ++i;
    }
    return false;
}

/*-------------------------------------------------------------------------*/

void
PopulateFileListFromDir( const CORE::CString& path      ,
                         const TStringVector& fileTypes , 
                         TStringVector& fileList        )
{GUCEF_TRACE;

    CORE::SDI_Data* sdiData = CORE::DI_First_Dir_Entry( path.C_String() );
    if ( NULL != sdiData )
    {
        do
        {
            if ( 0 != DI_Is_It_A_File( sdiData ) )
            {
                CORE::CString filename = DI_Name( sdiData );
                CORE::CString fileExt = CORE::ExtractFileExtention( filename );
                
                if ( IsStringInList( fileTypes, false, fileExt ) )
                {
                    fileList.push_back( filename );
                }
            }
        }
        while ( 0 != DI_Next_Dir_Entry( sdiData ) );
        DI_Cleanup( sdiData );
    }
}

/*---------------------------------------------------------------------------*/

void
PopulateDirListFromDir( const CORE::CString& path , 
                        TStringVector& dirList    )
{GUCEF_TRACE;

    CORE::SDI_Data* sdiData = CORE::DI_First_Dir_Entry( path.C_String() );
    if ( NULL != sdiData )
    {
        do
        {
            if ( 0 == DI_Is_It_A_File( sdiData ) )
            {
                CORE::CString dirName = DI_Name( sdiData ); 
                if ( ( dirName != "." ) && ( dirName != ".." ) )
                {
                    dirList.push_back( dirName );
                }
            }
        }
        while ( 0 != DI_Next_Dir_Entry( sdiData ) );
        DI_Cleanup( sdiData );
    }
}

/*---------------------------------------------------------------------------*/

CORE::CString
GetCMakeListsFileHeader( void )
{GUCEF_TRACE;

    return
    "#-------------------------------------------------------------------\n"
    "# This file is part of the CMake build system for GUCEF\n"
    "#     (Galaxy Unlimited Framework)\n"
    "# For the latest info, see http://www.VanvelzenSoftware.com/\n"
    "#\n"
    "# The contents of this file are placed in the public domain. Feel\n"
    "# free to make use of it in any way you like.\n"
    "#-------------------------------------------------------------------\n\n"
    "#\n"
    "# THIS FILE IS AUTOMATICALLY GENERATED BY CMAKELISTGENERATOR\n"
    "#\n"
    "#\n"
    "#\n"
    "# -- Basic CMake concepts:\n"
    "#      CMAKE_MODULE_PATH\n"
    "#      – Path to where the CMake modules are located\n"
    "#      CMAKE_INSTALL_PREFIX\n"
    "#      – Where to put files when calling 'make install'\n"
    "#      CMAKE_BUILD_TYPE\n"
    "#      – Type of build (Debug, Release, ...)\n"
    "#      BUILD_SHARED_LIBS\n"
    "#      – Switch between shared and static libraries\n";
    "#\n"
    "# Variables can be changed directly in the build files (CMakeLists.txt) or through\n"
    "# the command line by prefixing a variable's name with '-D':\n"
    "#               Example: cmake -DBUILD_SHARED_LIBS=OFF\n"
    "#           Here BUILD_SHARED_LIBS is the variable prefixed by -D\n"
    "#\n"
    "#\n";    
}

/*---------------------------------------------------------------------------*/

CORE::CString
GenerateCMakeListsFileSection( const CORE::CString& sectionContent , 
                               const TStringVectorMap& fileMap     )
{GUCEF_TRACE;

    CORE::CString newSectionContent = sectionContent;
    TStringVectorMap::const_iterator i = fileMap.begin();
    while ( i != fileMap.end() )
    {
        TStringVector::const_iterator n = (*i).second.begin();
        while ( n != (*i).second.end() )
        {        
            CORE::CString path = (*i).first;
            CORE::AppendToPath( path, (*n) ); 
            path = path.ReplaceChar( '\\', '/' );
            
            newSectionContent += "  " + path + "\n";
            ++n;
        }
        ++i;
    }
    newSectionContent += ")\n\n";
    return newSectionContent;
}

/*---------------------------------------------------------------------------*/

CORE::CString
GenerateCMakeListsFileIncludeSection( const TStringVectorMap& includeFiles )
{GUCEF_TRACE;

    CORE::CString sectionContent = "set(HEADER_FILES \n";
    return GenerateCMakeListsFileSection( sectionContent, includeFiles );
}

/*---------------------------------------------------------------------------*/

CORE::CString
GenerateCMakeListsFileSrcSection( const TStringVectorMap& srcFiles )
{GUCEF_TRACE;

    CORE::CString sectionContent = "set(SOURCE_FILES \n";
    return GenerateCMakeListsFileSection( sectionContent, srcFiles );
}

/*---------------------------------------------------------------------------*/

void
GetAllPlatformFiles( TModuleInfo& moduleInfo           ,
                     const CORE::CString& platformName ,
                     const CORE::CString& platformDir  )
{GUCEF_TRACE;

    // First we check each of the project include dirs for a platform sub-sir
    TStringVectorMap::iterator i = moduleInfo.includeDirs.begin();
    while ( i != moduleInfo.includeDirs.end() ) 
    {        
        // Build the include dir to check for a platform sub-dir
        CORE::CString includeDir = (*i).first;
        CORE::AppendToPath( includeDir, platformDir );
        CORE::CString fullIncludeDir = moduleInfo.rootDir;
        CORE::AppendToPath( fullIncludeDir, includeDir );
        
        // Try and get a list of files from the platform dir
        TStringVector platformFiles;
        PopulateFileListFromDir( fullIncludeDir, GetHeaderFileExtensions(), platformFiles );
        
        if ( !platformFiles.empty() )
        {
            GUCEF_LOG( CORE::LOGLEVEL_NORMAL, "Discovered valid platform sub-dir " + includeDir );
            
            // Add the platform files to the list of platform files from all include dirs
            TStringVectorMap& allFilesForThisPlatform = moduleInfo.platformHeaderFiles[ platformName ];
            includeDir = includeDir.ReplaceChar( '\\', '/' );
            TStringVector& allFilesForThisPlatformDir = allFilesForThisPlatform[ includeDir ];
            
            TStringVector::iterator n = platformFiles.begin();
            while ( n != platformFiles.end() )
            {
                allFilesForThisPlatformDir.push_back( (*n) );
                ++n;
            }
        }
        ++i;
    } 
    
    // Now we check each of the project source dirs for a platform sub-sir
    i = moduleInfo.sourceDirs.begin();
    while ( i != moduleInfo.sourceDirs.end() ) 
    {        
        // Build the source dir to check for a platform sub-dir
        CORE::CString sourceDir = (*i).first;
        CORE::AppendToPath( sourceDir, platformDir );
        CORE::CString fullSourceDir = moduleInfo.rootDir;
        CORE::AppendToPath( fullSourceDir, sourceDir );
        
        // Try and get a list of files from the platform dir
        TStringVector platformFiles;
        PopulateFileListFromDir( fullSourceDir, GetSourceFileExtensions(), platformFiles );

        if ( !platformFiles.empty() )
        {
            GUCEF_LOG( CORE::LOGLEVEL_NORMAL, "Discovered valid platform sub-dir " + sourceDir );
            
            // Add the platform files to the list of platform files from all source dirs
            TStringVectorMap& allFilesForThisPlatform = moduleInfo.platformSourceFiles[ platformName ];
            sourceDir = sourceDir.ReplaceChar( '\\', '/' );
            TStringVector& allFilesForThisPlatformDir = allFilesForThisPlatform[ sourceDir ];
            
            TStringVector::iterator n = platformFiles.begin();
            while ( n != platformFiles.end() )
            {
                allFilesForThisPlatformDir.push_back( (*n) );
                ++n;
            }
        }
        ++i;
    }    
}

/*---------------------------------------------------------------------------*/

const TStringSetMap&
GetSupportedPlatformDirMap( void )

{GUCEF_TRACE;

    static TStringSetMap platformMap;
    if ( platformMap.empty() )
    {
        platformMap[ "WIN32" ].insert( "mswin" );
        platformMap[ "WIN32" ].insert( "win32" );
        platformMap[ "WIN64" ].insert( "mswin" );
        platformMap[ "WIN64" ].insert( "win64" );
        platformMap[ "UNIX" ].insert( "linux" );
        platformMap[ "UNIX" ].insert( "unix" );
        platformMap[ "IPHONEOS" ].insert( "iphone" );
        platformMap[ "SYMBIAN" ].insert( "symbian" );
        platformMap[ "OSX" ].insert( "osx" );
        platformMap[ "ANDROID" ].insert( "android" );
        platformMap[ "GLX" ].insert( "glx" );
        platformMap[ "GTK" ].insert( "gtk" );
    }
    return platformMap;
}

/*---------------------------------------------------------------------------*/

const TStringSet&
GetSupportedPlatforms( void )
{
    static TStringSet platforms;
    if ( platforms.empty() )
    {
        const TStringSetMap& dirMap = GetSupportedPlatformDirMap();
        TStringSetMap::const_iterator i = dirMap.begin();
        while ( i != dirMap.end() )
        {
            platforms.insert( (*i).first );
            ++i;
        }        
    }
    return platforms;
}

/*---------------------------------------------------------------------------*/

const TStringSet&
GetSupportedPlatformDirs()
{
    static TStringSet platformDirs;
    if ( platformDirs.empty() )
    {
        const TStringSetMap& dirMap = GetSupportedPlatformDirMap();
        TStringSetMap::const_iterator i = dirMap.begin();
        while ( i != dirMap.end() )
        {
            const TStringSet& dirs = (*i).second;
            TStringSet::const_iterator n = dirs.begin();
            while ( n != dirs.end() )
            { 
                platformDirs.insert( (*n) );
                ++n;
            }
            ++i;
        }        
    }
    return platformDirs;
}

/*---------------------------------------------------------------------------*/

bool
IsDirAPlatformDir( const CORE::CString& path )
{GUCEF_TRACE;

    CORE::CString lastSubDir = CORE::LastSubDir( path ).Lowercase();
    const TStringSet& supportedPlatformDirs = GetSupportedPlatformDirs();
    return supportedPlatformDirs.end() != supportedPlatformDirs.find( lastSubDir );
}

/*---------------------------------------------------------------------------*/

void
GetAllPlatformFiles( TModuleInfo& moduleInfo )
{
    const TStringSetMap& dirMap = GetSupportedPlatformDirMap();
    TStringSetMap::const_iterator i = dirMap.begin();
    while ( i != dirMap.end() )
    {
        const TStringSet& dirs = (*i).second;
        TStringSet::const_iterator n = dirs.begin();
        while ( n != dirs.end() )
        {
            GetAllPlatformFiles( moduleInfo, (*i).first, (*n) );
            ++n;
        }
        ++i;
    }
}

/*---------------------------------------------------------------------------*/

void
GenerateCMakeListsFilePlatformFilesSection( TModuleInfo& moduleInfo           ,
                                            const CORE::CString& platformName ,
                                            CORE::CString& headerSection      ,
                                            CORE::CString& sourceSection      )
{GUCEF_TRACE;
    
    TStringVectorMapMap::iterator m = moduleInfo.platformHeaderFiles.find( platformName );
    if ( m != moduleInfo.platformHeaderFiles.end() )
    {
        const TStringVectorMap& platformHeaderFiles = (*m).second;
        if ( !platformHeaderFiles.empty() )
        {
            headerSection = "  set( PLATFORM_HEADER_FILES \n";
            
            TStringVectorMap::const_iterator n = platformHeaderFiles.begin();
            while ( n != platformHeaderFiles.end() )
            {
                const TStringVector& platformHeaderFilesDir = (*n).second; 
                TStringVector::const_iterator i = platformHeaderFilesDir.begin();
                while ( i != platformHeaderFilesDir.end() )
                {
                    CORE::CString path = (*n).first;
                    CORE::AppendToPath( path, (*i) ); 
                    path = path.ReplaceChar( '\\', '/' );
                    
                    headerSection += "    " + path + "\n";
                        
                    ++i;
                }
                ++n;
            }
            headerSection += "  )\n\n";
            
            // Add additional platform specific includes
            //headerSection += "  include_directories( ";
            //n = platformHeaderFiles.begin();
            //while ( n != platformHeaderFiles.end() )
            //{
            //    headerSection += (*n).first + " ";
            //    ++n;
            //}        
            //headerSection += ")\n";
            
            headerSection += "  set( PLATFORM_HEADER_INSTALL \"" + platformName + "\" )\n";
            headerSection += "  source_group( \"Platform Header Files\" FILES ${PLATFORM_HEADER_FILES} )\n\n";
        }    
    }
    
    m = moduleInfo.platformSourceFiles.find( platformName );
    if ( m != moduleInfo.platformSourceFiles.end() )
    {
        const TStringVectorMap& platformSourceFiles = (*m).second;
        if ( !platformSourceFiles.empty() )
        {
            sourceSection = "  set( PLATFORM_SOURCE_FILES \n";
            
            TStringVectorMap::const_iterator n = platformSourceFiles.begin();
            while ( n != platformSourceFiles.end() )
            {
                const TStringVector& platformSourceFilesDir = (*n).second;
                TStringVector::const_iterator i = platformSourceFilesDir.begin();
                while ( i != platformSourceFilesDir.end() )
                {
                    CORE::CString path = (*n).first;
                    CORE::AppendToPath( path, (*i) ); 
                    path = path.ReplaceChar( '\\', '/' );
                    
                    sourceSection += "    " + path + "\n";
                    ++i;
                }
                ++n;
            }
            sourceSection += "  )\n\n";
            
            sourceSection += "  set( PLATFORM_SOURCE_INSTALL \"" + platformName + "\" )\n";
            sourceSection += "  source_group( \"Platform Source Files\" FILES ${PLATFORM_SOURCE_FILES} )\n\n";
        }
    }
}

/*---------------------------------------------------------------------------*/

CORE::CString
GenerateCMakeListsFilePlatformFilesSection( TModuleInfo& moduleInfo )
{GUCEF_TRACE;

    CORE::CString sectionContent;
    bool firstPlatform = true;
    TStringVectorMapMap::iterator i = moduleInfo.platformHeaderFiles.begin();
    while ( i != moduleInfo.platformHeaderFiles.end() )
    {
        CORE::CString headerSection;
        CORE::CString sourceSection;
        const CORE::CString& platformName = (*i).first;
        GenerateCMakeListsFilePlatformFilesSection( moduleInfo, platformName, headerSection, sourceSection );
        
        if ( firstPlatform )
        {
            sectionContent = "\n\nif (" + platformName + ")\n" + headerSection + sourceSection;
            firstPlatform = false;
        }
        else
        {
            sectionContent += "elseif (" + platformName + ")\n" + headerSection + sourceSection;
        }
         
        ++i;
    }
    
    if ( !moduleInfo.platformHeaderFiles.empty() )
    {
        // since we added data we have to close the section
        sectionContent += "endif ()\n\n";
    }
 
    return sectionContent;
}

/*---------------------------------------------------------------------------*/

TStringVector
ParseFileLines( const CORE::CString& fileSuffix )
{
    CORE::CString testStr = fileSuffix.ReplaceChar( '\r', '\n' );
    testStr = testStr.CompactRepeatingChar( '\n' );
    return testStr.ParseElements( '\n', false );
}

/*---------------------------------------------------------------------------*/

TStringSet
ParseIncludeDirs( const CORE::CString& fileSuffix )
{GUCEF_TRACE;

    TStringSet includeDirs;
    
    TStringVector suffixFileLines = ParseFileLines( fileSuffix );    
    TStringVector::iterator i = suffixFileLines.begin();
    while ( i != suffixFileLines.end() )
    {
        CORE::CString testStr = (*i).Lowercase();
        CORE::Int32 subStrIdx = testStr.HasSubstr( "include_directories(", true );
        CORE::Int32 commentCharIdx = testStr.HasChar( '#', true );
        
        // Is this function call commented out?
        if ( commentCharIdx > -1 && commentCharIdx < subStrIdx )
        {
            // Then ignore it
            GUCEF_LOG( CORE::LOGLEVEL_BELOW_NORMAL, "Found include_directories function in suffix file but it is commented out, ignoring it" );
            ++i;
            continue;
        }
        
        // Does this line have the function call we are looking for?
        if ( subStrIdx >= 0 )
        {
            // It does, parse the parameters
            CORE::CString dependenciesStr = (*i).SubstrToChar( ')', (CORE::UInt32)subStrIdx+20, true );
            dependenciesStr = dependenciesStr.CompactRepeatingChar( ' ' );
            dependenciesStr = dependenciesStr.Trim( true );
            dependenciesStr = dependenciesStr.Trim( false );
            TStringVector elements = dependenciesStr.ParseElements( ' ' );
            if ( !elements.empty() )
            {
                GUCEF_LOG( CORE::LOGLEVEL_NORMAL, "Found " + CORE::Int32ToString( elements.size() ) + " include dirs in suffix file" );
            }
            
            // Add this collection to the list of all include dirs we found
            TStringVector::iterator n = elements.begin();
            while ( n != elements.end() )
            {
                includeDirs.insert( (*n) );
                ++n;
            }
        }
        ++i;
    }
    return includeDirs;
}

/*---------------------------------------------------------------------------*/

TStringVector
ParseDependencies( const CORE::CString& fileSuffix ,
                   CORE::CString& moduleName       )
{GUCEF_TRACE;

    TStringVector dependencies;
    
    TStringVector suffixFileLines = ParseFileLines( fileSuffix );    
    TStringVector::iterator i = suffixFileLines.begin();
    while ( i != suffixFileLines.end() )
    {
        CORE::CString testStr = (*i).Lowercase();
        CORE::Int32 subStrIdx = testStr.HasSubstr( "add_dependencies(", true );
        CORE::Int32 commentCharIdx = testStr.HasChar( '#', true );
        
        // Is this function call commented out?
        if ( commentCharIdx > -1 && commentCharIdx < subStrIdx )
        {
            // Then ignore it
            GUCEF_LOG( CORE::LOGLEVEL_BELOW_NORMAL, "Found add_dependencies function in suffix file but it is commented out, ignoring it" );
            ++i;
            continue;
        }
        
        // Does this line have the function call we are looking for?
        if ( subStrIdx >= 0 )
        {
            // It does, parse the parameters
            CORE::CString dependenciesStr = (*i).SubstrToChar( ')', (CORE::UInt32)subStrIdx+17, true );
            dependenciesStr = dependenciesStr.CompactRepeatingChar( ' ' );
            dependenciesStr = dependenciesStr.Trim( true );
            dependenciesStr = dependenciesStr.Trim( false );
            TStringVector elements = dependenciesStr.ParseElements( ' ' );
            if ( !elements.empty() )
            {
                moduleName = *(elements.begin());
                elements.erase( elements.begin() );
                GUCEF_LOG( CORE::LOGLEVEL_NORMAL, "Found " + CORE::Int32ToString( elements.size() ) + " dependencies in suffix file" );
            }
            
            // Add this collection to the list of all dependencies we found
            TStringVector::iterator n = elements.begin();
            while ( n != elements.end() )
            {
                dependencies.push_back( (*n) );
                ++n;
            }
        }
        ++i;
    }
    return dependencies;
}

/*---------------------------------------------------------------------------*/

CORE::CString
ParseModuleName( const CORE::CString& fileSuffix )
{GUCEF_TRACE;

    CORE::CString testStr = fileSuffix.Lowercase();
    CORE::Int32 subStrIdx = testStr.HasSubstr( "add_library(", true );
    if ( subStrIdx >= 0 )
    {
        CORE::CString dependenciesStr = fileSuffix.SubstrToChar( ')', (CORE::UInt32)subStrIdx+12, true );
        dependenciesStr = dependenciesStr.CompactRepeatingChar( ' ' );
        dependenciesStr = dependenciesStr.Trim( true );
        dependenciesStr = dependenciesStr.Trim( false );
        std::vector< CORE::CString > elements = dependenciesStr.ParseElements( ' ' );
        if ( !elements.empty() )
        {
            return *(elements.begin());
        }
        
        // Malformed file!
        return CORE::CString();
    }
    else
    {
        subStrIdx = testStr.HasSubstr( "add_executable(", true );
        if ( subStrIdx >= 0 )
        {
            CORE::CString dependenciesStr = fileSuffix.SubstrToChar( ')', (CORE::UInt32)subStrIdx+15, true );
            dependenciesStr = dependenciesStr.CompactRepeatingChar( ' ' );
            dependenciesStr = dependenciesStr.Trim( true );
            dependenciesStr = dependenciesStr.Trim( false );
            std::vector< CORE::CString > elements = dependenciesStr.ParseElements( ' ' );
            if ( !elements.empty() )
            {
                return *(elements.begin());
            }
            
            // Malformed file!
            return CORE::CString();
        }
        else
        {
            CORE::CString moduleName;
            ParseDependencies( fileSuffix, moduleName );
            return moduleName;
        }
    }
}

/*---------------------------------------------------------------------------*/

const TModuleInfo*
GetModuleInfo( const TProjectInfo& projectInfo ,
               const CORE::CString& moduleName )
{GUCEF_TRACE;

    TModuleInfoVector::const_iterator i = projectInfo.modules.begin();
    while ( i != projectInfo.modules.end() )
    {
        if ( (*i).name == moduleName )
        {
            return &(*i);
        }        
        ++i;
    }
    return NULL;
}

/*---------------------------------------------------------------------------*/

CORE::CString
GetRelativePathToOtherPathRoot( const CORE::CString& fromPath ,
                                const CORE::CString& toPath   )
{GUCEF_TRACE;

    CORE::Int32 pathEquality = (CORE::Int32) fromPath.FindMaxSubstrEquality( toPath, 0, true ); 
    CORE::CString toPathRemainder = toPath.ReplaceChar( '\\', '/' );
    CORE::CString fromPathRemainder = fromPath.ReplaceChar( '\\', '/' );
    pathEquality -= toPathRemainder.SubstrToChar( '/', pathEquality, false ).Length() - 1;    
    toPathRemainder = toPathRemainder.CutChars( pathEquality, true );
    fromPathRemainder = fromPathRemainder.CutChars( pathEquality, true ); 
    TStringVector upDirElements = fromPathRemainder.ParseElements( '/', false );
    
    CORE::CString relativePath;
    for ( CORE::UInt32 i=0; i<upDirElements.size(); ++i )
    {
        relativePath += "../";
    }
    CORE::AppendToPath( relativePath, toPathRemainder );
    relativePath = CORE::RelativePath( relativePath );
    return relativePath.ReplaceChar( '\\', '/' );
}

/*---------------------------------------------------------------------------*/

CORE::CString
GenerateModuleIncludesForPlatform( const TProjectInfo& projectInfo   ,
                                   TModuleInfo& moduleInfo           ,
                                   const CORE::CString& platformName )
{GUCEF_TRACE;

    // Add include dirs for each dependency we know about
    CORE::CString allRelDependencyPaths;
    TStringVector& dependencies = moduleInfo.dependencies;
    TStringVector::iterator i = dependencies.begin();
    while ( i != dependencies.end() )
    {
        // Get a dependency module which is already fully processed
        const TModuleInfo* dependencyModule = GetModuleInfo( projectInfo, (*i) );
        if ( NULL != dependencyModule )
        {
            // Determine the relative path to this other module
            CORE::CString relativePath = GetRelativePathToOtherPathRoot( moduleInfo.rootDir        , 
                                                                         dependencyModule->rootDir );
            
            // Now construct the relative path to each of the dependency module's include dirs
            // These dir will all become include dirs for this module
            TStringVectorMapMap::const_iterator p = dependencyModule->platformHeaderFiles.find( platformName );
            if ( p != dependencyModule->platformHeaderFiles.end() )
            {
                const TStringVectorMap& platformHeaderFiles = (*p).second;
                TStringVectorMap::const_iterator n = platformHeaderFiles.begin();
                while ( n != platformHeaderFiles.end() )
                {
                    CORE::CString dependencyInclDir = relativePath;
                    CORE::AppendToPath( dependencyInclDir, (*n).first );
                    dependencyInclDir = CORE::RelativePath( dependencyInclDir );
                    dependencyInclDir = dependencyInclDir.ReplaceChar( '\\', '/' );
                    
                    // Add the contructed include directory to the list of dependency directories
                    // for the current module. This can later be used again by other modules which
                    // include this one.
                    moduleInfo.dependencyPlatformIncludeDirs[ platformName ].insert( dependencyInclDir );
                    
                    allRelDependencyPaths += dependencyInclDir + " ";
                    ++n;
                }
            }
            
            // On top of that we have to include all the include dirs that the dependency module
            // was including itself since it's headers might be referring to those files.
            TStringSetMap::const_iterator r = dependencyModule->dependencyPlatformIncludeDirs.find( platformName );
            if ( r != dependencyModule->dependencyPlatformIncludeDirs.end() )
            {
                const TStringSet& dependencyPlatformIncludeDirs = (*r).second;
                TStringSet::const_iterator m = dependencyPlatformIncludeDirs.begin();
                while ( m != dependencyPlatformIncludeDirs.end() )
                {
                    CORE::CString dependencyInclDir = relativePath;
                    CORE::AppendToPath( dependencyInclDir, (*m) );
                    dependencyInclDir = CORE::RelativePath( dependencyInclDir );
                    dependencyInclDir = dependencyInclDir.ReplaceChar( '\\', '/' );
                    
                    // Add the contructed include directory to the list of dependency directories
                    // for the current module. This can later be used again by other modules which
                    // include this one.
                    moduleInfo.dependencyPlatformIncludeDirs[ platformName ].insert( dependencyInclDir );
                    
                    allRelDependencyPaths += dependencyInclDir + " ";
                    ++m;
                }
            }                         
        }
        ++i;
    }

    // Add all the regular platform include dirs for this module
    const TStringVectorMap& platformHeaderFiles = moduleInfo.platformHeaderFiles[ platformName ];
    TStringVectorMap::const_iterator n = platformHeaderFiles.begin();
    while ( n != platformHeaderFiles.end() )
    {
        CORE::CString includeDir = (*n).first.ReplaceChar( '\\', '/' );        
        allRelDependencyPaths += includeDir + " ";
        ++n;
    }

    CORE::CString sectionContent;
    if ( allRelDependencyPaths.Length() > 0 )
    {
        sectionContent = "\nif ( "+ platformName + " )\n  include_directories( " + allRelDependencyPaths + ")\nendif( "+ platformName + " )\n";
    }
    
    return sectionContent;
}

/*---------------------------------------------------------------------------*/

TStringSet
GetListOfRelevantPlatformsForModule( TModuleInfo& moduleInfo )
{GUCEF_TRACE;

    TStringSet platformList;
    TStringVectorMapMap::iterator i = moduleInfo.platformHeaderFiles.begin();
    while ( i != moduleInfo.platformHeaderFiles.end() )
    {
        platformList.insert( (*i).first );        
        ++i;
    }
    i = moduleInfo.platformSourceFiles.begin();
    while ( i != moduleInfo.platformSourceFiles.end() )
    {
        platformList.insert( (*i).first );        
        ++i;
    }
    return platformList;
}

/*---------------------------------------------------------------------------*/

CORE::CString
GenerateModuleIncludesForAllPlatforms( const TProjectInfo& projectInfo ,
                                       TModuleInfo& moduleInfo         )
{GUCEF_TRACE;

    CORE::CString sectionContent;
    
    TStringSet relevantPlatformDirs = GetSupportedPlatforms();
    TStringSet::iterator i = relevantPlatformDirs.begin();
    while ( i != relevantPlatformDirs.end() )
    {
        sectionContent += GenerateModuleIncludesForPlatform( projectInfo, moduleInfo, (*i) );
        ++i;
    }
    return sectionContent;
}

/*---------------------------------------------------------------------------*/

CORE::CString
GenerateModuleIncludes( const TProjectInfo& projectInfo ,
                        TModuleInfo& moduleInfo         )
{GUCEF_TRACE;
    
    // Add include dirs for each dependency we know about
    CORE::CString allRelDependencyPaths;
    TStringVector& dependencies = moduleInfo.dependencies;
    TStringVector::iterator i = dependencies.begin();
    while ( i != dependencies.end() )
    {
        // Get a dependency module which is already fully processed
        const TModuleInfo* dependencyModule = GetModuleInfo( projectInfo, (*i) );
        if ( NULL != dependencyModule )
        {
            // Determine the relative path to this other module
            CORE::CString relativePath = GetRelativePathToOtherPathRoot( moduleInfo.rootDir        , 
                                                                         dependencyModule->rootDir );
            
            // Now construct the relative path to each of the dependency module's include dirs
            // These dir will all become include dirs for this module
            TStringVectorMap::const_iterator n = dependencyModule->includeDirs.begin();
            while ( n != dependencyModule->includeDirs.end() )
            {
                CORE::CString dependencyInclDir = relativePath;
                CORE::AppendToPath( dependencyInclDir, (*n).first );
                dependencyInclDir = CORE::RelativePath( dependencyInclDir );
                dependencyInclDir = dependencyInclDir.ReplaceChar( '\\', '/' );
                
                // Add the contructed include directory to the list of dependency directories
                // for the current module. This can later be used again by other modules which
                // include this one.
                moduleInfo.dependencyIncludeDirs.insert( dependencyInclDir );
                
                allRelDependencyPaths += dependencyInclDir + " ";
                ++n;
            }
            
            // On top of that we have to include all the include dirs that the dependency module
            // was including itself since it's headers might be referring to those files.
            TStringSet::const_iterator m = dependencyModule->dependencyIncludeDirs.begin();
            while ( m != dependencyModule->dependencyIncludeDirs.end() )
            {
                CORE::CString dependencyInclDir = relativePath;
                CORE::AppendToPath( dependencyInclDir, (*m) );
                dependencyInclDir = CORE::RelativePath( dependencyInclDir );
                dependencyInclDir = dependencyInclDir.ReplaceChar( '\\', '/' );
                
                // Add the contructed include directory to the list of dependency directories
                // for the current module. This can later be used again by other modules which
                // include this one.
                moduleInfo.dependencyIncludeDirs.insert( dependencyInclDir );
                
                allRelDependencyPaths += dependencyInclDir + " ";
                ++m;
            }                         
        }
        ++i;
    }

    // Add all the regular include dirs for this module
    TStringVectorMap::iterator n = moduleInfo.includeDirs.begin();
    while ( n != moduleInfo.includeDirs.end() )
    {
        CORE::CString includeDir = (*n).first.ReplaceChar( '\\', '/' );        
        allRelDependencyPaths += includeDir + " ";
        ++n;
    }

    CORE::CString sectionContent;
    if ( allRelDependencyPaths.Length() > 0 )
    {
        sectionContent = "\ninclude_directories( " + allRelDependencyPaths + ")\n";
    }
    
    sectionContent += GenerateModuleIncludesForAllPlatforms( projectInfo, moduleInfo );
    
    return sectionContent;
}

/*---------------------------------------------------------------------------*/

CORE::CString
GenerateAutoGenertedSeperator( bool end )
{GUCEF_TRACE;

    CORE::CString seperator = "\n\n\n#********";
    if ( end )
    {
        seperator += " END OF AUTOGENERATED CONTENT ";
    }
    else
    {
        seperator += " START OF AUTOGENERATED CONTENT ";
    }
    seperator += "********\n\n\n";
    return seperator;
}

/*---------------------------------------------------------------------------*/

void
GenerateCMakeListsFile( const TProjectInfo& projectInfo ,
                        TModuleInfo& moduleInfo         )
{GUCEF_TRACE;
    
    // Set file header comment section
    CORE::CString fileContent = GetCMakeListsFileHeader();
    
    // Set project name comment section
    fileContent += "\n# Configure " + moduleInfo.name + "\n\n";
    
    // Add all the include files
    fileContent += GenerateCMakeListsFileIncludeSection( moduleInfo.includeDirs );
    GUCEF_LOG( CORE::LOGLEVEL_NORMAL, "Processed " + CORE::UInt32ToString( moduleInfo.includeDirs.size() ) + " include dirs for project " + moduleInfo.name );
    
    // Add all the source files
    fileContent += GenerateCMakeListsFileSrcSection( moduleInfo.sourceDirs );
    GUCEF_LOG( CORE::LOGLEVEL_NORMAL, "Processed " + CORE::UInt32ToString( moduleInfo.sourceDirs.size() ) + " source dirs for project " + moduleInfo.name );
    
    // Add all platform files, headers and source
    fileContent += GenerateCMakeListsFilePlatformFilesSection( moduleInfo );
    
    fileContent += GenerateAutoGenertedSeperator( true );
    
    // We have completed generating the file content and gathering info
    moduleInfo.cmakeListFileContentPreSuffix = fileContent;
    
    fileContent = GenerateAutoGenertedSeperator( false );
    
    // Add all the include directories for this module
    fileContent += GenerateModuleIncludes( projectInfo, moduleInfo );

    fileContent += GenerateAutoGenertedSeperator( true );
    
    moduleInfo.cmakeListFileContentPostSuffix = fileContent;
}

/*---------------------------------------------------------------------------*/

void
FindSubDirsWithFileTypes( TStringVectorMap& fileMap          ,
                          const TStringVector& fileTypes     ,
                          const CORE::CString& platform      ,
                          const CORE::CString& curRootDir    ,
                          const CORE::CString& curRootDirSeg )
{GUCEF_TRACE;

    // First we build a list of all files for the directory for ease of handling
    TStringVector fileList;
    PopulateFileListFromDir( curRootDir, fileTypes, fileList );

    // Now we add/substract from that list based on generator instructions
    TDirProcessingInstructions instructionStorage;
    ExcludeOrIncludeEntriesAsSpecifiedForDir( curRootDir, platform, fileList, &instructionStorage ); 
    
    if ( fileList.size() > 0 )
    {
        // found files in the current root
        fileMap[ curRootDirSeg ] = fileList;
    }
    
    // Get a list of sub-dirs
    TStringVector dirList;
    PopulateDirListFromDir( curRootDir, dirList );
    
    // Now we add/substract from that list based on generator instructions
    ExcludeOrIncludeEntriesAsSpecifiedForDir( curRootDir, instructionStorage, platform, dirList ); 
    
    TStringVector::iterator i = dirList.begin();
    while ( i != dirList.end() )
    { 
        CORE::CString subDir = curRootDir;
        CORE::AppendToPath( subDir, (*i) );
        
        // Do not recurse into other project dirs or platform dirs
        if ( !IsDirAProjectDir( subDir ) && !IsDirAPlatformDir( subDir ) ) 
        {
            CORE::CString subDirSeg = curRootDirSeg;
            CORE::AppendToPath( subDirSeg, (*i) );
            subDirSeg.ReplaceChar( '\\', '/' );
            
            FindSubDirsWithFileTypes( fileMap, fileTypes, platform, subDir, subDirSeg );
        }
        ++i;
    }
}

/*---------------------------------------------------------------------------*/

void
FindSubDirsWithFileTypes( TStringVectorMap& fileMap          ,
                          const TStringVector& fileTypes     ,
                          const CORE::CString& curRootDir    ,
                          const CORE::CString& curRootDirSeg )
{GUCEF_TRACE;

    FindSubDirsWithFileTypes( fileMap         , 
                              fileTypes       ,
                              CORE::CString() ,
                              curRootDir      ,
                              curRootDirSeg   );
}

/*---------------------------------------------------------------------------*/

void
FindSubDirsWithHeaders( TModuleInfo& moduleInfo )
{GUCEF_TRACE;

    // Look into the root itself and recuse downwards
    FindSubDirsWithFileTypes( moduleInfo.includeDirs, GetHeaderFileExtensions(), moduleInfo.rootDir, "" );  
}

/*---------------------------------------------------------------------------*/

void
FindSubDirsWithSource( TModuleInfo& moduleInfo )
{GUCEF_TRACE;

    // Look into the root itself and recuse downwards
    FindSubDirsWithFileTypes( moduleInfo.sourceDirs, GetSourceFileExtensions(), moduleInfo.rootDir, "" );
}

/*---------------------------------------------------------------------------*/

void
ProcessProjectDir( TModuleInfo& moduleInfo )
{GUCEF_TRACE;
   
    // Set a project name based off the module sub-dir name
    // Best we can do unless we can get it from the suffix file later
    moduleInfo.name = CORE::LastSubDir( moduleInfo.rootDir ); 
    
    CORE::CString pathToSuffixFile = moduleInfo.rootDir;
    CORE::AppendToPath( pathToSuffixFile, "CMakeListsSuffix.txt" );
    
    if ( CORE::LoadTextFileAsString( pathToSuffixFile, moduleInfo.cmakeListSuffixFileContent ) )
    {
        // Fill in the dependencies as specified in the suffix file
        CORE::CString actualModuleName;
        moduleInfo.dependencies = ParseDependencies( moduleInfo.cmakeListSuffixFileContent, actualModuleName );
        moduleInfo.dependencyIncludeDirs = ParseIncludeDirs( moduleInfo.cmakeListSuffixFileContent );  
        actualModuleName = ParseModuleName( moduleInfo.cmakeListSuffixFileContent );
        if ( actualModuleName != moduleInfo.name )
        {
            GUCEF_LOG( CORE::LOGLEVEL_NORMAL, "Detected module name that differs from module sub-dir name, correcting module name from \"" + moduleInfo.name + "\" to \"" + actualModuleName + "\"" );
            moduleInfo.name = actualModuleName;
        }
        GUCEF_LOG( CORE::LOGLEVEL_NORMAL, "Processed suffix file for project " + moduleInfo.name );
    }
    else
    {
        // add suffix example section instead
        moduleInfo.cmakeListSuffixFileContent  = "## TODO: the following is an example suffix section, you have to complete it\n";
        moduleInfo.cmakeListSuffixFileContent += "#add_definitions(-DTIXML_USE_STL)\n";
        moduleInfo.cmakeListSuffixFileContent += "#add_executable(" + moduleInfo.name + " ${HEADER_FILES} ${SOURCE_FILES})\n";
        moduleInfo.cmakeListSuffixFileContent += "#target_link_libraries(" + moduleInfo.name + " ${GUCEF_LIBRARIES})\n";
        moduleInfo.cmakeListSuffixFileContent += "#gucef_config_tool(" + moduleInfo.name + ")\n";
    }
    
    FindSubDirsWithHeaders( moduleInfo );
    FindSubDirsWithSource( moduleInfo );
    
    GUCEF_LOG( CORE::LOGLEVEL_NORMAL, "Generated CMake List file content for project dir: " + moduleInfo.rootDir );
}

/*---------------------------------------------------------------------------*/

void
LocateAndProcessProjectDirsRecusively( TProjectInfo& projectInfo ,
                                       CORE::CString topLevelDir )
{GUCEF_TRACE;
    
    GUCEF_LOG( CORE::LOGLEVEL_EVERYTHING, "Recursively processing directory: " + topLevelDir );
    
    // Is this a project dir or some other dir?    
    if ( IsDirAProjectDir( topLevelDir ) )
    {
        GUCEF_LOG( CORE::LOGLEVEL_NORMAL, "Determined that the following directory is a project directory: " + topLevelDir );
        
        // Process this dir
        TModuleInfo moduleInfo;
        moduleInfo.rootDir = topLevelDir;
        moduleInfo.buildOrder = 0;
        ProcessProjectDir( moduleInfo );        
        GetAllPlatformFiles( moduleInfo );
        projectInfo.modules.push_back( moduleInfo );
    }
    
    // Get all subdir's
    std::vector< CORE::CString > dirList;
    PopulateDirListFromDir( topLevelDir, dirList );
    
    // Add/subtract dirs from the list based on generator instructions
    ExcludeOrIncludeEntriesAsSpecifiedForDir( topLevelDir, CORE::CString(), dirList );  
    
    // Process all sub-dirs
    std::vector< CORE::CString >::iterator i = dirList.begin();
    while ( i != dirList.end() )
    {
        CORE::CString subDir = topLevelDir;
        CORE::AppendToPath( subDir, (*i) );
        
        LocateAndProcessProjectDirsRecusively( projectInfo, subDir );
        ++i;
    }
}

/*---------------------------------------------------------------------------*/

void
WriteCMakeListsFilesToDisk( TProjectInfo& projectInfo )
{GUCEF_TRACE;

    // Write all the CMakeLists.txt files
    std::vector< TModuleInfo >::iterator i = projectInfo.modules.begin();
    while ( i != projectInfo.modules.end() )
    {
        TModuleInfo& moduleInfo = (*i);
        
        CORE::CString pathToCMakeListsFile = moduleInfo.rootDir;
        CORE::AppendToPath( pathToCMakeListsFile, "CMakeLists.txt" );
        
        CORE::CString fileContent = moduleInfo.cmakeListFileContentPreSuffix + 
                                    moduleInfo.cmakeListSuffixFileContent +
                                    moduleInfo.cmakeListFileContentPostSuffix;
        CORE::WriteStringAsTextFile( pathToCMakeListsFile, fileContent );
        
        GUCEF_LOG( CORE::LOGLEVEL_NORMAL, "Created CMakeLists.txt file for project dir: " + moduleInfo.rootDir );
        ++i;
    }
}

/*---------------------------------------------------------------------------*/

void
GenerateCMakeListsContentForModules( TProjectInfo& projectInfo )
{GUCEF_TRACE;

    // Generate all the CMakeLists.txt file content
    std::vector< TModuleInfo >::iterator i = projectInfo.modules.begin();
    while ( i != projectInfo.modules.end() )
    {
        TModuleInfo& moduleInfo = (*i);     
        GenerateCMakeListsFile( projectInfo, moduleInfo );        
        
        GUCEF_LOG( CORE::LOGLEVEL_NORMAL, "Generated CMakeLists.txt file contents for project dir: " + moduleInfo.rootDir );
        ++i;
    }
}

/*---------------------------------------------------------------------------*/

int
GetModulePrio( TModulePrioMap& prioMap         ,
               const CORE::CString& moduleName )
{GUCEF_TRACE;

    TModulePrioMap::iterator i = prioMap.begin();
    while ( i != prioMap.end() )
    {
        if ( (*i).second->name == moduleName )
        {
            return (*i).first;
        }
        ++i;
    }
    return -1;
}

/*---------------------------------------------------------------------------*/

TModuleInfoPtrVector
GetModulesWithDependencyCounfOf( TModuleInfoVector& modules   ,
                                 CORE::UInt32 dependencyCount )
{GUCEF_TRACE;

    TModuleInfoPtrVector resultSet;
    TModuleInfoVector::iterator i = modules.begin();
    while ( i != modules.end() )
    {
        if ( (*i).dependencies.size() == dependencyCount )
        {
            resultSet.push_back( &( (*i) ) );
        }
        ++i;
    }
    return resultSet;
}

/*---------------------------------------------------------------------------*/

CORE::UInt32
GetHighestDependencyCount( TModuleInfoVector& modules )
{GUCEF_TRACE;

    CORE::UInt32 greatestDependencyCount = 0;
    TModuleInfoVector::iterator i = modules.begin();
    while ( i != modules.end() )
    {
        if ( (*i).dependencies.size() > greatestDependencyCount )
        {
            greatestDependencyCount = (*i).dependencies.size();
        }
        ++i;
    }
    return greatestDependencyCount;
}

/*---------------------------------------------------------------------------*/

void
SortModulesInDependencyOrder( TProjectInfo& projectInfo )
{GUCEF_TRACE;

    GUCEF_LOG( CORE::LOGLEVEL_NORMAL, "Sorting all modules based on build priority,.." );
    
    TModulePrioMap prioMap;
    
    // First we make sorting easier by putting all modules in the priority list
    // in such a way that they are already sorted somewhat based on their dependency count
    int prioInc=0;
    CORE::UInt32 highestDependencyCount = GetHighestDependencyCount( projectInfo.modules );
    for ( CORE::UInt32 i=0; i<=highestDependencyCount; ++i )
    {
        // Grab a list of modules with *i* dependencies
        TModuleInfoPtrVector modules = GetModulesWithDependencyCounfOf( projectInfo.modules, i );
        TModuleInfoPtrVector::iterator n = modules.begin();
        while ( n != modules.end() )
        {
            prioMap[ prioInc ] = (*n);
            ++n;
            ++prioInc;
        }        
    }
    GUCEF_LOG( CORE::LOGLEVEL_BELOW_NORMAL, "Performed initial sorting based on number of dependencies" );
    
    // Now we can bubble sort the priority map, because of the initial sorting done above
    // the number of iterations should be greatly reduced.
    bool changes = true;
    while ( changes )
    {
        changes = false;
        
        TModulePrioMap::iterator n = prioMap.begin();
        while ( n != prioMap.end() )
        {
            int modulePrio = (*n).first;
            TModuleInfo* moduleInfo = (*n).second;
            
            TStringVector::iterator m = moduleInfo->dependencies.begin();
            while ( m != moduleInfo->dependencies.end() )
            {
                // Logically we cannot have a prio higher then the dependency
                // so we will ensure it is lower 
                int dependencyPrio = GetModulePrio( prioMap, (*m) );
                if ( dependencyPrio >= modulePrio )
                {
                    GUCEF_LOG( CORE::LOGLEVEL_BELOW_NORMAL, "Module " + moduleInfo->name + " with build priority " + CORE::Int32ToString( modulePrio ) + 
                                " has dependency " + (*m) + " which has build priority " + CORE::Int32ToString( dependencyPrio ) + ", the dependency should have a lower priority (thus build earlier) then the module that requires it!"  );
                    
                    TModulePrioMap newPrioMap;
                    
                    // Set the new priority, the priority should be higher then the dependency 
                    // causing it to be build after the dependency (lower prio = builder earlier)
                    modulePrio = dependencyPrio+1;

                    // Now insert our reprioritized item at this location
                    newPrioMap[ modulePrio ] = moduleInfo;

                    // Now add everything around the reprioritized item to our
                    // new prio map
                    TModulePrioMap::iterator p = prioMap.begin();
                    while ( p != prioMap.end() )
                    {                        
                        if ( (*p).first < modulePrio )
                        {
                            if ( (*p).second->name != moduleInfo->name )
                            {
                                newPrioMap[ (*p).first ] = (*p).second;
                            }
                        }
                        else
                        if ( (*p).first >= modulePrio )
                        {
                            if ( (*p).second->name != moduleInfo->name )
                            {
                                newPrioMap[ (*p).first + 1 ] = (*p).second;
                                GUCEF_LOG( CORE::LOGLEVEL_BELOW_NORMAL, "Changed build priority for module: " + (*p).second->name + 
                                            " from " + CORE::Int32ToString( (*p).first ) + " to " + CORE::Int32ToString( (*p).first+1 ) );
                            }                                                                                                     
                        }
                        ++p;
                    }

                    // Reindex list to close gap
                    GUCEF_LOG( CORE::LOGLEVEL_BELOW_NORMAL, "Reindexing the build priority list" );
                    CORE::Int32 i=0;                    
                    TModulePrioMap newestPrioMap;
                    p = newPrioMap.begin();
                    while ( p != newPrioMap.end() )
                    {                        
                        newestPrioMap[ i ] = (*p).second;

                        if ( i != (*p).first )
                        {                        
                            GUCEF_LOG( CORE::LOGLEVEL_BELOW_NORMAL, "Changed build priority for module: " + (*p).second->name + 
                                        " from " + CORE::Int32ToString( (*p).first ) + " to " + CORE::Int32ToString( i ) );
                        }                        
                        ++i; ++p;
                    }
                    
                    #ifdef GUCEF_CORE_DEBUG_MODE
                    
                    // For debug: output final differeces between the altered list and the original 
                    TModulePrioMap::iterator q = prioMap.begin();
                    p = newestPrioMap.begin();
                    while ( p != newestPrioMap.end() )
                    {                        
                        if ( (*p).second != (*q).second )
                        {
                            GUCEF_LOG( CORE::LOGLEVEL_BELOW_NORMAL, "Difference with original build order: module " + (*p).second->name + 
                                        " is now at index " + CORE::Int32ToString( (*p).first ) + " where module " + (*q).second->name + " used to be" );
                        }                  
                        ++q; ++p;
                    }
                    
                    #endif

                    // Replace the old map with the new one and start the next bubbling iteration
                    prioMap = newestPrioMap;
                    changes = true;
                    
                    GUCEF_LOG( CORE::LOGLEVEL_BELOW_NORMAL, "Completed changing the build priority for module: " + moduleInfo->name );
                    break;
                }
                ++m;
            }
            
            // Restart the process if something had to be changed
            if ( changes )
            {
                break;
            }
            
            ++n;
        }        
    }
    
    GUCEF_LOG( CORE::LOGLEVEL_NORMAL, "Finished determining the correct build order (priority) for all modules, assigning priorities and reordering modules to refect this" );
    
    // First assign the determined build order index to the module
    TModuleInfoVector newModuleInfoVector;
    TModulePrioMap::iterator n = prioMap.begin();
    while ( n != prioMap.end() )
    {
        TModuleInfo* moduleInfo = (*n).second;
        moduleInfo->buildOrder = (*n).first;
        
        newModuleInfoVector.push_back( *moduleInfo );
        ++n;
    }
    projectInfo.modules = newModuleInfoVector;

    GUCEF_LOG( CORE::LOGLEVEL_NORMAL, "Finished assigning the correct build order for all modules and sorted them accordingly" );
}

/*---------------------------------------------------------------------------*/

void
ParseParams( const int argc                 , 
             char* argv[]                   ,
             CORE::CValueList& keyValueList )
{GUCEF_TRACE;
    
    keyValueList.DeleteAll();
    GUCEF::CORE::CString argString;
    if ( argc > 0 )
    {
        argString = *argv;

        // Combine the argument strings back into a single string because we don't want to use
        // a space as the seperator
        for ( int i=1; i<argc; ++i )
        {
            argString += ' ' + CORE::CString( argv[ i ] );
        }
        
        // Parse the param list based on the ' symbol
        keyValueList.SetMultiple( argString, '\'' );
    }
}

/*---------------------------------------------------------------------------*/

int
main( int argc , char* argv[] )
{GUCEF_TRACE;

    CORE::CString logFilename = GUCEF::CORE::RelativePath( "$CURWORKDIR$" );
    CORE::AppendToPath( logFilename, "CMakeListsGenerator_Log.txt" );
    CORE::CFileAccess logFileAccess( logFilename, "w" );

    CORE::CStdLogger logger( logFileAccess );
    CORE::CLogManager::Instance()->AddLogger( &logger );
    
    #ifdef GUCEF_MSWIN_BUILD
    CORE::CMSWinConsoleLogger consoleOut;
    CORE::CLogManager::Instance()->AddLogger( &consoleOut );
    #endif /* GUCEF_MSWIN_BUILD ? */

    CORE::CValueList keyValueList;
    ParseParams( argc, argv, keyValueList );
                                              
    TStringVector rootDirs;
    try
    {
        rootDirs = keyValueList.GetValueVector( "rootDir" );
    }
    catch ( CORE::CValueList::EUnknownKey& )
    {
        rootDirs.push_back( CORE::RelativePath( "$CURWORKDIR$" ) );
    }
    
    // Gather all the information
    TProjectInfo projectInfo;
    TStringVector::iterator i = rootDirs.begin();
    while ( i != rootDirs.end() )
    {
        LocateAndProcessProjectDirsRecusively( projectInfo, (*i) );
        ++i;
    }
    // Order the modules in the list such so that they are placed in the order they need to be build
    SortModulesInDependencyOrder( projectInfo );
    
    // Generate the contents of the CMakeLists files
    GenerateCMakeListsContentForModules( projectInfo );
    
    // Now write what we created to disk
    WriteCMakeListsFilesToDisk( projectInfo );
}

/*---------------------------------------------------------------------------*/

#ifdef GUCEF_MSWIN_BUILD

int __stdcall
WinMain( HINSTANCE hinstance     ,
         HINSTANCE hprevinstance ,
         LPSTR lpcmdline         ,
         int ncmdshow            )
{GUCEF_TRACE;

    int argc = 0;
    char** argv = &lpcmdline;
    if ( lpcmdline != NULL )
    {
        if ( *lpcmdline != '\0' )
        {
            argc = 1;
        }
    }

    return main( argc, argv );
}

#endif

/*---------------------------------------------------------------------------*/
